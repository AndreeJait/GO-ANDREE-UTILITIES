// Code generated by MockGen. DO NOT EDIT.
// Source: cache/cache.go

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
)

// MockPipe is a mock of Pipe interface.
type MockPipe struct {
	ctrl     *gomock.Controller
	recorder *MockPipeMockRecorder
}

// MockPipeMockRecorder is the mock recorder for MockPipe.
type MockPipeMockRecorder struct {
	mock *MockPipe
}

// NewMockPipe creates a new mock instance.
func NewMockPipe(ctrl *gomock.Controller) *MockPipe {
	mock := &MockPipe{ctrl: ctrl}
	mock.recorder = &MockPipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipe) EXPECT() *MockPipeMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockPipe) Exec() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockPipeMockRecorder) Exec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPipe)(nil).Exec))
}

// Get mocks base method.
func (m *MockPipe) Get(key string, object interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockPipeMockRecorder) Get(key, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPipe)(nil).Get), key, object)
}

// Set mocks base method.
func (m *MockPipe) Set(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockPipeMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPipe)(nil).Set), key, value)
}

// SetWithExpiration mocks base method.
func (m *MockPipe) SetWithExpiration(key string, value interface{}, expired time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExpiration", key, value, expired)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExpiration indicates an expected call of SetWithExpiration.
func (mr *MockPipeMockRecorder) SetWithExpiration(key, value, expired interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpiration", reflect.TypeOf((*MockPipe)(nil).SetWithExpiration), key, value, expired)
}

// MockPubSub is a mock of PubSub interface.
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub.
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance.
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockPubSub) Channel() <-chan *redis.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(<-chan *redis.Message)
	return ret0
}

// Channel indicates an expected call of Channel.
func (mr *MockPubSubMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockPubSub)(nil).Channel))
}

// Close mocks base method.
func (m *MockPubSub) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPubSubMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubSub)(nil).Close))
}

// Publish mocks base method.
func (m *MockPubSub) Publish(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSub)(nil).Publish), message)
}

// Receive mocks base method.
func (m *MockPubSub) Receive() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockPubSubMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockPubSub)(nil).Receive))
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockCache) Client() Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(Cache)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockCacheMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockCache)(nil).Client))
}

// Close mocks base method.
func (m *MockCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCache)(nil).Close))
}

// FlushAll mocks base method.
func (m *MockCache) FlushAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockCacheMockRecorder) FlushAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockCache)(nil).FlushAll))
}

// FlushDatabase mocks base method.
func (m *MockCache) FlushDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushDatabase indicates an expected call of FlushDatabase.
func (mr *MockCacheMockRecorder) FlushDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDatabase", reflect.TypeOf((*MockCache)(nil).FlushDatabase))
}

// Get mocks base method.
func (m *MockCache) Get(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), arg0, arg1)
}

// GetZSet mocks base method.
func (m *MockCache) GetZSet(arg0 string) ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZSet", arg0)
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZSet indicates an expected call of GetZSet.
func (mr *MockCacheMockRecorder) GetZSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZSet", reflect.TypeOf((*MockCache)(nil).GetZSet), arg0)
}

// HDel mocks base method.
func (m *MockCache) HDel(key string, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// HDel indicates an expected call of HDel.
func (mr *MockCacheMockRecorder) HDel(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockCache)(nil).HDel), varargs...)
}

// HGet mocks base method.
func (m *MockCache) HGet(key, field string, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", key, field, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// HGet indicates an expected call of HGet.
func (mr *MockCacheMockRecorder) HGet(key, field, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockCache)(nil).HGet), key, field, response)
}

// HGetAll mocks base method.
func (m *MockCache) HGetAll(key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockCacheMockRecorder) HGetAll(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockCache)(nil).HGetAll), key)
}

// HMGet mocks base method.
func (m *MockCache) HMGet(key string, fields ...string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet.
func (mr *MockCacheMockRecorder) HMGet(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockCache)(nil).HMGet), varargs...)
}

// HMSet mocks base method.
func (m *MockCache) HMSet(key string, value map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet.
func (mr *MockCacheMockRecorder) HMSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockCache)(nil).HMSet), key, value)
}

// HMSetWithExpiration mocks base method.
func (m *MockCache) HMSetWithExpiration(key string, value map[string]interface{}, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSetWithExpiration", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSetWithExpiration indicates an expected call of HMSetWithExpiration.
func (mr *MockCacheMockRecorder) HMSetWithExpiration(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSetWithExpiration", reflect.TypeOf((*MockCache)(nil).HMSetWithExpiration), key, value, ttl)
}

// HSet mocks base method.
func (m *MockCache) HSet(key, field string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", key, field, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSet indicates an expected call of HSet.
func (mr *MockCacheMockRecorder) HSet(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockCache)(nil).HSet), key, field, value)
}

// HSetWithExpiration mocks base method.
func (m *MockCache) HSetWithExpiration(key, field string, value interface{}, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetWithExpiration", key, field, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSetWithExpiration indicates an expected call of HSetWithExpiration.
func (mr *MockCacheMockRecorder) HSetWithExpiration(key, field, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetWithExpiration", reflect.TypeOf((*MockCache)(nil).HSetWithExpiration), key, field, value, ttl)
}

// Incr mocks base method.
func (m *MockCache) Incr(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockCacheMockRecorder) Incr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockCache)(nil).Incr), key)
}

// IncrBy mocks base method.
func (m *MockCache) IncrBy(key string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrBy indicates an expected call of IncrBy.
func (mr *MockCacheMockRecorder) IncrBy(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockCache)(nil).IncrBy), key, value)
}

// Keys mocks base method.
func (m *MockCache) Keys(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockCacheMockRecorder) Keys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCache)(nil).Keys), arg0)
}

// MGet mocks base method.
func (m *MockCache) MGet(key []string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", key)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockCacheMockRecorder) MGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockCache)(nil).MGet), key)
}

// MSet mocks base method.
func (m *MockCache) MSet(keys []string, values []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSet", keys, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet.
func (mr *MockCacheMockRecorder) MSet(keys, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockCache)(nil).MSet), keys, values)
}

// MSetWithExpiration mocks base method.
func (m *MockCache) MSetWithExpiration(keys []string, values []interface{}, ttls []time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSetWithExpiration", keys, values, ttls)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSetWithExpiration indicates an expected call of MSetWithExpiration.
func (mr *MockCacheMockRecorder) MSetWithExpiration(keys, values, ttls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetWithExpiration", reflect.TypeOf((*MockCache)(nil).MSetWithExpiration), keys, values, ttls)
}

// Ping mocks base method.
func (m *MockCache) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCacheMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCache)(nil).Ping))
}

// Pipeline mocks base method.
func (m *MockCache) Pipeline() Pipe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipeline")
	ret0, _ := ret[0].(Pipe)
	return ret0
}

// Pipeline indicates an expected call of Pipeline.
func (mr *MockCacheMockRecorder) Pipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*MockCache)(nil).Pipeline))
}

// Remove mocks base method.
func (m *MockCache) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockCacheMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCache)(nil).Remove), arg0)
}

// RemoveByPattern mocks base method.
func (m *MockCache) RemoveByPattern(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByPattern", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByPattern indicates an expected call of RemoveByPattern.
func (mr *MockCacheMockRecorder) RemoveByPattern(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByPattern", reflect.TypeOf((*MockCache)(nil).RemoveByPattern), arg0, arg1)
}

// Set mocks base method.
func (m *MockCache) Set(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), arg0, arg1)
}

// SetNx mocks base method.
func (m *MockCache) SetNx(key string, value interface{}, ttl time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNx", key, value, ttl)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNx indicates an expected call of SetNx.
func (mr *MockCacheMockRecorder) SetNx(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNx", reflect.TypeOf((*MockCache)(nil).SetNx), key, value, ttl)
}

// SetWithExpiration mocks base method.
func (m *MockCache) SetWithExpiration(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExpiration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExpiration indicates an expected call of SetWithExpiration.
func (mr *MockCacheMockRecorder) SetWithExpiration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpiration", reflect.TypeOf((*MockCache)(nil).SetWithExpiration), arg0, arg1, arg2)
}

// SetZSet mocks base method.
func (m *MockCache) SetZSet(arg0 string, arg1 ...redis.Z) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetZSet", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetZSet indicates an expected call of SetZSet.
func (mr *MockCacheMockRecorder) SetZSet(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZSet", reflect.TypeOf((*MockCache)(nil).SetZSet), varargs...)
}

// SetZSetWithExpiration mocks base method.
func (m *MockCache) SetZSetWithExpiration(arg0 string, arg1 time.Duration, arg2 ...redis.Z) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetZSetWithExpiration", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetZSetWithExpiration indicates an expected call of SetZSetWithExpiration.
func (mr *MockCacheMockRecorder) SetZSetWithExpiration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZSetWithExpiration", reflect.TypeOf((*MockCache)(nil).SetZSetWithExpiration), varargs...)
}

// Subscribe mocks base method.
func (m *MockCache) Subscribe(channel string) (PubSub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", channel)
	ret0, _ := ret[0].(PubSub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCacheMockRecorder) Subscribe(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCache)(nil).Subscribe), channel)
}

// TTL mocks base method.
func (m *MockCache) TTL(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL.
func (mr *MockCacheMockRecorder) TTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockCache)(nil).TTL), key)
}

// ZIncrBy mocks base method.
func (m *MockCache) ZIncrBy(key string, increment float64, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrBy", key, increment, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncrBy indicates an expected call of ZIncrBy.
func (mr *MockCacheMockRecorder) ZIncrBy(key, increment, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrBy", reflect.TypeOf((*MockCache)(nil).ZIncrBy), key, increment, member)
}

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockPool) Client() Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(Cache)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockPoolMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockPool)(nil).Client))
}

// Close mocks base method.
func (m *MockPool) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPoolMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPool)(nil).Close))
}

// Use mocks base method.
func (m *MockPool) Use(callback PoolCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Use", callback)
}

// Use indicates an expected call of Use.
func (mr *MockPoolMockRecorder) Use(callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockPool)(nil).Use), callback)
}
